{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for interacting with internal Tap-To-Park services",
        "title": "Tap-To-Park API",
        "termsOfService": "http://n3cd.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/",
    "paths": {
        "/info": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a user's info based on a Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.User"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login a user, this will generate a Bearer token to be used with Authenticated requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body recieved.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization/invites": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get the invites associated with a User's organization based on their Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization",
                    "invite"
                ],
                "summary": "Get the invites for your organization",
                "parameters": [
                    {
                        "type": "number",
                        "description": "The size of a page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "The page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/database.Invite"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No invites were found for your organization.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Couldn't count all of the invites in the organization.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Create an invite for User's organization based on their Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization",
                    "invite"
                ],
                "summary": "Create an invite",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Invite"
                        }
                    },
                    "404": {
                        "description": "Failed to find your organization.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create invite.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization/me": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get the organization associated with a User based on their Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Get your organization",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Pull a deep copy of all of the organization's information",
                        "name": "deep",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Organization"
                        }
                    },
                    "400": {
                        "description": "You don't seem to have an organization.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization/spots": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get the spots associated with a User's organization based on their Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization",
                    "spots"
                ],
                "summary": "Get the spots for your organization",
                "parameters": [
                    {
                        "type": "number",
                        "description": "The size of a page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "The page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/database.Spot"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Couldn't count all of the spots in the organization.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a user using an organization's invite code, this will generate a Bearer token to be used with Authenticated requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body recieved.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update invite.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spots": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Create a spot at a longitude and latitude",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spots"
                ],
                "summary": "Create a spot",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Spot"
                        }
                    },
                    "400": {
                        "description": "A spot with this name already exists for the organization.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "A spot with this name already exists for the organization.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spots/near": {
            "get": {
                "description": "Get a spot near a longitude and latitude",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spots"
                ],
                "summary": "Get spots near",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "To filter spots by handicap spots",
                        "name": "handicap",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Spot"
                        }
                    },
                    "400": {
                        "description": "Longitude must be a number.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Could not load the list of spots.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spots/{id}": {
            "get": {
                "description": "Get a spot by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spots"
                ],
                "summary": "Get a spot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the spot",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Spot"
                        }
                    },
                    "404": {
                        "description": "Spot was not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Update a spot's information such as pricing table, name or longitude and latitude",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spots"
                ],
                "summary": "Update a spot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the spot",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated spot.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "That spot does not exist.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Delete a spot by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spots"
                ],
                "summary": "Delete a spot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the spot",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Spot successfully deleted.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "That spot does not exist.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Coordinates": {
            "type": "object",
            "required": [
                "latitude",
                "longitude"
            ],
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "database.Invite": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "integer"
                },
                "expiration": {
                    "type": "string"
                },
                "organization": {
                    "type": "integer"
                },
                "usedBy": {
                    "type": "integer"
                }
            }
        },
        "database.Organization": {
            "type": "object",
            "properties": {
                "invites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Invite"
                    }
                },
                "name": {
                    "type": "string"
                },
                "spots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Spot"
                    }
                }
            }
        },
        "database.Pricing": {
            "type": "object",
            "properties": {
                "friday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "monday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "saturday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "sunday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "thursday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "tuesday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "wednesday": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "database.Reservation": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "end": {
                    "type": "string"
                },
                "guid": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "database.Spot": {
            "type": "object",
            "properties": {
                "coords": {
                    "$ref": "#/definitions/database.Coordinates"
                },
                "guid": {
                    "type": "string"
                },
                "handicap": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "type": "integer"
                },
                "reservations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Reservation"
                    }
                },
                "table": {
                    "$ref": "#/definitions/database.Pricing"
                }
            }
        },
        "database.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "guid": {
                    "type": "string"
                }
            }
        },
        "routes.JWTResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}