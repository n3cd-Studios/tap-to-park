basePath: /api/
definitions:
  database.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  database.Invite:
    properties:
      code:
        type: string
      createdBy:
        type: integer
      expiration:
        type: string
      organization:
        type: integer
      usedBy:
        type: integer
    type: object
  database.Pricing:
    properties:
      friday:
        items:
          type: number
        type: array
      monday:
        items:
          type: number
        type: array
      saturday:
        items:
          type: number
        type: array
      sunday:
        items:
          type: number
        type: array
      thursday:
        items:
          type: number
        type: array
      tuesday:
        items:
          type: number
        type: array
      wednesday:
        items:
          type: number
        type: array
    type: object
  database.Reservation:
    properties:
      email:
        type: string
      end:
        type: string
      guid:
        type: string
      price:
        type: number
      start:
        type: string
    type: object
  database.Spot:
    properties:
      coords:
        $ref: '#/definitions/database.Coordinates'
      guid:
        type: string
      handicap:
        type: boolean
      name:
        type: string
      organization:
        type: integer
      reservations:
        items:
          $ref: '#/definitions/database.Reservation'
        type: array
      table:
        $ref: '#/definitions/database.Pricing'
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API for interacting with internal Tap-To-Park services
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://n3cd.io/terms/
  title: Tap-To-Park API
  version: "1.0"
paths:
  /organization/code:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Invite'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User or Organization not found
          schema:
            type: string
        "500":
          description: Failed to create invite
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get's all the invites for an organization
  /spots:
    post:
      consumes:
      - application/json
      description: Create a spot at a longitude and latitude
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "400":
          description: A spot with this name already exists for the organization.
          schema:
            type: string
        "409":
          description: A spot with this name already exists for the organization.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Create a spot
      tags:
      - spots
  /spots/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a spot by its ID
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot successfully deleted.
          schema:
            type: string
        "404":
          description: That spot does not exist.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Delete a spot
      tags:
      - spots
    get:
      consumes:
      - application/json
      description: Get a spot by its ID
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Spot was not found
          schema:
            type: string
      summary: Get a spot
      tags:
      - spots
    put:
      consumes:
      - application/json
      description: Update a spot's information such as pricing table, name or longitude
        and latitude
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated spot.
          schema:
            type: string
        "400":
          description: Invalid body.
          schema:
            type: string
        "404":
          description: That spot does not exist.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Update a spot
      tags:
      - spots
  /spots/near:
    get:
      consumes:
      - application/json
      description: Get a spot near a longitude and latitude
      parameters:
      - description: To filter spots by handicap spots
        in: query
        name: handicap
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "400":
          description: Longitude must be a number.
          schema:
            type: string
        "404":
          description: Could not load the list of spots.
          schema:
            type: string
      summary: Get spots near
      tags:
      - spots
swagger: "2.0"
