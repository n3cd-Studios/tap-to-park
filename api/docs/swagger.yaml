basePath: /api/
definitions:
  database.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  database.Error:
    properties:
      message:
        type: string
    type: object
  database.Invite:
    properties:
      code:
        type: string
      createdBy:
        type: integer
      expiration:
        type: string
      organization:
        type: integer
      usedBy:
        type: integer
    type: object
  database.Organization:
    properties:
      invites:
        items:
          $ref: '#/definitions/database.Invite'
        type: array
      name:
        type: string
      spots:
        items:
          $ref: '#/definitions/database.Spot'
        type: array
    type: object
  database.Reservation:
    properties:
      costPerHour:
        type: integer
      end:
        type: string
      guid:
        type: string
      id:
        type: integer
      start:
        type: string
    type: object
  database.Spot:
    properties:
      coords:
        $ref: '#/definitions/database.Coordinates'
      guid:
        type: string
      handicap:
        type: boolean
      name:
        type: string
      organization:
        type: integer
      reservations:
        items:
          $ref: '#/definitions/database.Reservation'
        type: array
    type: object
  routes.JWTResponse:
    properties:
      token:
        type: string
    type: object
  routes.ReservationInput:
    properties:
      spotID:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API for interacting with internal Tap-To-Park services
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://n3cd.io/terms/
  title: Tap-To-Park API
  version: "1.0"
paths:
  /admin/organization:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/database.Organization'
              type: array
            type: array
        "400":
          description: Unauthorized
          schema:
            type: string
      summary: Get all of the organizations associated with an admin
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Invite'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User or Organization not found
          schema:
            type: string
        "500":
          description: Failed to create invite
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create an invite to allow new user to join admin's organization
  /admin/organization/data:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/database.Spot'
              type: array
            type: array
        "400":
          description: Unauthorized
          schema:
            type: string
      summary: Get all of the spots data associated with an organization
  /auth/info:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.JWTResponse'
        "400":
          description: Failed to use token to retrieve user information
          schema:
            type: string
      summary: Gets the info of the current user
  /auth/login:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.JWTResponse'
        "400":
          description: Failed to log in
          schema:
            type: string
      summary: Logs a User in using a username and a password
  /auth/register:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.JWTResponse'
        "400":
          description: Failed to register user
          schema:
            type: string
      summary: Registers a User in using a username and a password
  /reservations:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ReservationInput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/database.Error'
      summary: Creates a reservation using a spotID and specified time
  /reservations/{id}:
    get:
      parameters:
      - description: ID of the reservation
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/database.Error'
      summary: Get a reservation by an ID
  /spots/create:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "400":
          description: Invalid body
          schema:
            type: string
        "401":
          description: Invalid token
          schema:
            type: string
      summary: Create a spot at a longitude and latitude
  /spots/delete:
    delete:
      responses:
        "200":
          description: Successfully deleted spot
          schema:
            type: string
        "400":
          description: Invalid body
          schema:
            type: string
        "401":
          description: Invalid token
          schema:
            type: string
      summary: Delete a spot by it's ID
  /spots/info:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Spot was not found
          schema:
            type: string
      summary: Get the spots near a longitude and latitude
  /spots/near:
    get:
      parameters:
      - description: latitude to search by
        in: query
        name: lat
        required: true
        type: number
      - description: longitude to search by
        in: query
        name: lng
        required: true
        type: number
      - description: filter spots by handicap accessibility
        in: query
        name: handicap
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Could not load the list of spots
          schema:
            type: string
      summary: Get the spots near a longitude and latitude, with optional handicap
        filter
swagger: "2.0"
