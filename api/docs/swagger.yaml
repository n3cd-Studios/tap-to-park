basePath: /api/
definitions:
  auth.JWTResponse:
    properties:
      token:
        type: string
    type: object
  database.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  database.Invite:
    properties:
      code:
        type: string
      createdBy:
        type: integer
      expiration:
        type: string
      organization:
        type: integer
      usedBy:
        type: integer
    type: object
  database.Organization:
    properties:
      invites:
        items:
          $ref: '#/definitions/database.Invite'
        type: array
      name:
        type: string
      spots:
        items:
          $ref: '#/definitions/database.Spot'
        type: array
    type: object
  database.Pricing:
    properties:
      friday:
        items:
          type: number
        type: array
      monday:
        items:
          type: number
        type: array
      saturday:
        items:
          type: number
        type: array
      sunday:
        items:
          type: number
        type: array
      thursday:
        items:
          type: number
        type: array
      tuesday:
        items:
          type: number
        type: array
      wednesday:
        items:
          type: number
        type: array
    type: object
  database.Reservation:
    properties:
      email:
        type: string
      end:
        type: string
      guid:
        type: string
      price:
        type: number
      start:
        type: string
    type: object
  database.Session:
    properties:
      device:
        type: string
      expires:
        type: string
      guid:
        type: string
      ip:
        type: string
      lastUsed:
        type: string
    type: object
  database.Spot:
    properties:
      coords:
        $ref: '#/definitions/database.Coordinates'
      guid:
        type: string
      handicap:
        type: boolean
      maxHours:
        type: integer
      name:
        type: string
      organization:
        type: integer
      reservations:
        items:
          $ref: '#/definitions/database.Reservation'
        type: array
      table:
        $ref: '#/definitions/database.Pricing'
    type: object
  database.User:
    properties:
      email:
        type: string
      guid:
        type: string
      role:
        $ref: '#/definitions/database.UserRole'
      sessions:
        items:
          $ref: '#/definitions/database.Session'
        type: array
    type: object
  database.UserRole:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - USER
    - ADMIN
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API for interacting with internal Tap-To-Park services
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://n3cd.io/terms/
  title: Tap-To-Park API
  version: "1.0"
paths:
  /auth/{type}:
    get:
      consumes:
      - application/json
      description: Direct user to the OAuth page of another sight, with correct scopes.
      parameters:
      - description: The type of auth flow you want to initialize
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: That OAuth flow does not exist.
          schema:
            type: string
      summary: Initialize an OAuth flow
      tags:
      - auth
      - oauth
    post:
      consumes:
      - application/json
      description: This route is used to forward information from the OAuth initialization
        to the handler to generate an access token and a JWT.
      parameters:
      - description: The type of auth flow you want to callback
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.JWTResponse'
        "400":
          description: Failed to create session.
          schema:
            type: string
      summary: The callback for an OAuth flow
      tags:
      - auth
      - oauth
  /auth/info:
    post:
      consumes:
      - application/json
      description: Get a user's info based on a Bearer token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
        "401":
          description: Unauthorized.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get user info
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user, this will generate a Bearer token to be used with
        Authenticated requests.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.JWTResponse'
        "400":
          description: Invalid body recieved.
          schema:
            type: string
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a user using an organization's invite code, this will
        generate a Bearer token to be used with Authenticated requests.
      parameters:
      - description: The invite code, if you were invited to an organization
        in: query
        name: invite
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.JWTResponse'
        "400":
          description: Invalid body recieved.
          schema:
            type: string
        "500":
          description: Failed to update invite.
          schema:
            type: string
      summary: Register a user
      tags:
      - auth
  /auth/sessions:
    get:
      consumes:
      - application/json
      description: Get a user's sessions based on a Bearer token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/database.Session'
              type: array
            type: array
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: You don't have any sessions.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get user's sessions
      tags:
      - auth
  /auth/sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Revoke a session based on an ID
      parameters:
      - description: The ID of the session
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Revoked session.
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: Failed to revoke session.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Revoke a session
      tags:
      - auth
  /organization/invites:
    get:
      consumes:
      - application/json
      description: Get the invites associated with a User's organization based on
        their Bearer token
      parameters:
      - description: The size of a page
        in: query
        name: size
        type: number
      - description: The page
        in: query
        name: page
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/database.Invite'
              type: array
            type: array
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: No invites were found for your organization.
          schema:
            type: string
        "500":
          description: Couldn't count all of the invites in the organization.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get the invites for your organization
      tags:
      - organization
      - invite
    post:
      consumes:
      - application/json
      description: Create an invite for User's organization based on their Bearer
        token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Invite'
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: Failed to find your organization.
          schema:
            type: string
        "500":
          description: Failed to create invite.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Create an invite
      tags:
      - organization
      - invite
  /organization/me:
    get:
      consumes:
      - application/json
      description: Get the organization associated with a User based on their Bearer
        token
      parameters:
      - description: Pull a deep copy of all of the organization's information
        in: query
        name: deep
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Organization'
        "400":
          description: You don't seem to have an organization.
          schema:
            type: string
        "401":
          description: Unauthorized.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get your organization
      tags:
      - organization
  /organization/reservations:
    get:
      consumes:
      - application/json
      description: Get the transactions associated with a User's organization based
        on their Bearer token
      parameters:
      - description: The size of a page
        in: query
        name: size
        type: number
      - description: The page
        in: query
        name: page
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/database.Reservation'
              type: array
            type: array
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: No reservations were found for your organization.
          schema:
            type: string
        "500":
          description: Couldn't count all of the reservations in the organization.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get the transactions for your organization
      tags:
      - organization
      - transactions
      - reservations
  /organization/spots:
    get:
      consumes:
      - application/json
      description: Get the spots associated with a User's organization based on their
        Bearer token
      parameters:
      - description: The size of a page
        in: query
        name: size
        type: number
      - description: The page
        in: query
        name: page
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/database.Spot'
              type: array
            type: array
        "401":
          description: Unauthorized.
          schema:
            type: string
        "500":
          description: Couldn't count all of the spots in the organization.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get the spots for your organization
      tags:
      - organization
      - spot
  /reservation/{id}:
    get:
      consumes:
      - application/json
      description: Get a reservation for a Spot based on the Reservation's GUID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Reservation'
        "404":
          description: That reservation does not exist.
          schema:
            type: string
      summary: Get a reservation by ID
      tags:
      - reservation
  /spots:
    post:
      consumes:
      - application/json
      description: Create a spot at a latitude and longitude
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "400":
          description: A spot with this name already exists for the organization.
          schema:
            type: string
        "401":
          description: Unauthorized.
          schema:
            type: string
        "409":
          description: A spot with this name already exists for the organization.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Create a spot
      tags:
      - spot
  /spots/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a spot by its ID
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot successfully deleted.
          schema:
            type: string
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: That spot does not exist.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Delete a spot
      tags:
      - spot
    get:
      consumes:
      - application/json
      description: Get a spot by its ID
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Spot was not found.
          schema:
            type: string
      summary: Get a spot
      tags:
      - spot
    put:
      consumes:
      - application/json
      description: Update a spot's information such as pricing table, name or latitude
        and longitude
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated spot.
          schema:
            type: string
        "400":
          description: Invalid body.
          schema:
            type: string
        "401":
          description: Unauthorized.
          schema:
            type: string
        "404":
          description: That spot does not exist.
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Update a spot
      tags:
      - spot
  /spots/{id}/qr:
    get:
      consumes:
      - application/json
      description: Generates the QRCode that is associated with a spot
      parameters:
      - description: The ID of the spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: The QR Code that was generated
          schema:
            type: png
        "404":
          description: Spot was not found.
          schema:
            type: string
        "500":
          description: Failed to generate QR Code.
          schema:
            type: string
      summary: Get a spot's QRCode
      tags:
      - spot
  /spots/near:
    get:
      consumes:
      - application/json
      description: Get a spot near a latitude and longitude
      parameters:
      - description: To filter spots by handicap spots
        in: query
        name: handicap
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "400":
          description: Longitude must be a number.
          schema:
            type: string
        "404":
          description: Could not load the list of spots.
          schema:
            type: string
      summary: Get spots near
      tags:
      - spot
  /stripe/{id}:
    post:
      consumes:
      - application/json
      description: Create a Stripe checkout session and forward the user to Stripe
      parameters:
      - description: The ID of the Spot
        in: path
        name: id
        required: true
        type: string
      - description: The Session ID passed from Stripe
        in: query
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The Stripe checkout URL
          schema:
            type: string
        "400":
          description: Reservation cost must be at least 50¢.
          schema:
            type: string
        "409":
          description: This spot has already been reserved.
          schema:
            type: string
        "500":
          description: Failed to create stripe session.
          schema:
            type: string
      summary: Create a checkout session
      tags:
      - spot
      - reservation
      - stripe
  /stripe/{id}/cancel:
    get:
      consumes:
      - application/json
      description: This is just a dummy route, it redirects to the frontend
      parameters:
      - description: The ID of the Spot
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "301":
          description: This will redirect you to a page on the frontend.
          schema:
            type: string
        "400":
          description: That spot ID is invalid.
          schema:
            type: string
      summary: Cancel callback for Stripe
      tags:
      - spot
      - reservation
      - stripe
  /stripe/{id}/success:
    get:
      consumes:
      - application/json
      description: Create a Reservation from a Stripe Session ID
      parameters:
      - description: The ID of the Spot
        in: path
        name: id
        required: true
        type: string
      - description: The Session ID passed from Stripe
        in: query
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "301":
          description: This will redirect you to a page on the frontend.
          schema:
            type: string
        "400":
          description: Something went wrong (did you resubmit the request?)
          schema:
            type: string
        "500":
          description: Malformed metadata.
          schema:
            type: string
      summary: Success callback for Stripe
      tags:
      - spot
      - reservation
      - stripe
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
