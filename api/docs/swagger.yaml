basePath: /api/
definitions:
  database.Error:
    properties:
      message:
        type: string
    type: object
  database.Point:
    properties:
      x:
        type: number
    type: object
  database.Spot:
    properties:
      coords:
        $ref: '#/definitions/database.Point'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      handicap:
        type: boolean
      id:
        type: integer
      organizationID:
        type: integer
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  routes.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  routes.ReservationInput:
    properties:
      spotID:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API for interacting with internal Tap-To-Park services
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://n3cd.io/terms/
  title: Tap-To-Park API
  version: "1.0"
paths:
  /auth/login:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.LoginInput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/database.Error'
      summary: Logs a User in using a username and a password
  /reservations:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ReservationInput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/database.Error'
      summary: Creates a reservation using a spotID and specified time
  /reservations/{id}:
    get:
      parameters:
      - description: ID of the reservation
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/database.Error'
      summary: Get a reservation by an ID
  /spots/near:
    get:
      parameters:
      - description: latitude to search by
        in: query
        name: lat
        required: true
        type: number
      - description: longitude to search by
        in: query
        name: lng
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Spot'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/database.Error'
      summary: Get the spots near a longitude and latitude
swagger: "2.0"
